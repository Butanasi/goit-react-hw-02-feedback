{"version":3,"sources":["Components/Section/Section.jsx","Components/FeedbackOptions/FeedbackOptions.jsx","Components/Statistics/Statistics.jsx","Components/Notification/Notification.jsx","App.js","index.js"],"names":["Section","title","children","propType","PropTypes","string","isRequired","node","FeedbackOptions","options","onLeaveFeedback","map","key","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","event","nameButton","currentTarget","textContent","setState","prevState","this","keys","Object","Component","defaultProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAEaA,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC/B,OACE,oCACE,6BAAKD,IACJC,EAED,gDAINF,EAAQG,SAAW,CACjBF,MAAOG,IAAUC,OAAOC,WACxBJ,SAAUE,IAAUG,MCZf,IAAMC,EAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBACzC,OACE,mCACGD,EAAQE,KAAI,SAAAC,GAAG,OACd,wBAAQC,KAAK,SAAmBC,QAASJ,EAAzC,SACGE,GADwBA,SCJtBG,EAAa,SAAC,GAMpB,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,MACAC,EACI,EADJA,mBAEA,OACE,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,wCAAWC,KACX,oDAAuBC,EAAvB,WCbOC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC7B,OAAO,6BAAKA,KCGRC,E,4MAEJC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPO,mBAAqB,WACnB,MAA+B,EAAKD,MACpC,OADA,EAAQR,KAAR,EAAcC,QAAd,EAAuBC,K,EAGzBQ,gCAAkC,WAChC,OAAOC,KAAKC,MAAO,EAAKJ,MAAMR,KAAO,EAAKS,qBAAwB,M,EAEpEf,gBAAkB,SAAAmB,GAChB,IAAMC,EAAaD,EAAME,cAAcC,YACvC,EAAKC,UAAS,SAAAC,GAAS,sBACpBJ,EAAcI,EAAUJ,IAAe,O,4CAI5C,WACE,MAA+BK,KAAKX,MAA5BR,EAAR,EAAQA,KAAME,EAAd,EAAcA,IAAKD,EAAnB,EAAmBA,QACbE,EAAQgB,KAAKV,qBACbW,EAAOC,OAAOD,KAAKD,KAAKX,OAE9B,OACE,qCACE,cAAC,EAAD,CAASvB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEQ,QAAS2B,EACT1B,gBAAiByB,KAAKzB,oBAGf,IAAVS,EACC,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBe,KAAKT,oCAG3B,cAAC,EAAD,CAAcJ,QAAQ,gC,GA3CdgB,aAAZf,EACGgB,aAAe,GAiDThB,QCnDfiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.232a2e88.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nexport const Section = ({ title, children }) => {\r\n  return (\r\n    <section>\r\n      <h1>{title}</h1>\r\n      {children}\r\n\r\n      <h2>Statistics</h2>\r\n    </section>\r\n  );\r\n};\r\nSection.propType = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nexport const FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <>\r\n      {options.map(key => (\r\n        <button type=\"button\" key={key} onClick={onLeaveFeedback}>\r\n          {key}\r\n        </button>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nexport const Statistics = ({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}) => {\r\n  return (\r\n    <ul>\r\n      <li>Good: {good}</li>\r\n      <li>Neutral: {neutral}</li>\r\n      <li>Bad: {bad}</li>\r\n      <li>Total:{total}</li>\r\n      <li>Positive feedback:{positivePercentage}%</li>\r\n    </ul>\r\n  );\r\n};\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nexport const Notification = ({ message }) => {\r\n  return <h3>{message}</h3>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n","import React, { Component } from 'react';\nimport { Section } from './Components/Section';\nimport { FeedbackOptions } from './Components/FeedbackOptions';\nimport { Statistics } from './Components/Statistics';\nimport { Notification } from './Components/Notification';\n\nclass App extends Component {\n  static defaultProps = {};\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((this.state.good / this.countTotalFeedback()) * 100);\n  };\n  onLeaveFeedback = event => {\n    const nameButton = event.currentTarget.textContent;\n    this.setState(prevState => ({\n      [nameButton]: (prevState[nameButton] += 1),\n    }));\n  };\n\n  render() {\n    const { good, bad, neutral } = this.state;\n    const total = this.countTotalFeedback();\n    const keys = Object.keys(this.state);\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={keys}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n        </Section>\n        {total !== 0 ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"There is no feedback\" />\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}